{"version":3,"sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/items/contacts-item-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","redux/contacts/filter/contacts-filter-actions.js","components/Filter/Filter.jsx","components/Contact/ContactItem/ContactItem.styled.js","components/Contact/ContactItem/ContactItem.jsx","components/Contact/ContactList/ContactList.jsx","App.js","redux/contacts/items/contacts-item-reducer.js","redux/contacts/filter/contacts-filter-reducer.js","redux/contacts/index.js","components/utils/storage.js","redux/store.js","index.js"],"names":["Label","styled","label","addContact","createAction","delContact","connect","dispatch","onSubmit","contact","props","useState","name","setName","number","setNumber","handleChange","target","value","reset","e","preventDefault","type","pattern","title","required","onChange","changeFilter","Filter","filterStr","useSelector","state","contacts","filter","useDispatch","toLowerCase","StyledContact","li","ContactItem","onDelete","onClick","getFiltered","items","includes","ContactList","filteredContacts","map","id","App","itemsReducer","createReducer","payload","uuidv4","action","filterReducer","_","combineReducers","STORAGE_NAME","persistedState","localStorage","getItem","JSON","parse","loadContacts","store","configureStore","reducer","contactReducer","preloadedState","devTools","process","subscribe","getState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc2c08ea.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n  + input[type=\"submit\"] {\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: aquamarine;\r\n    }\r\n  }\r\n`;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"contact/add\");\r\nexport const delContact = createAction(\"contact/del\");\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Label } from \"./ContactForm.styled\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../../redux/contacts/items/contacts-item-actions\";\r\n\r\nfunction ContactForm(props) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    if (name === \"name\") {\r\n      setName(value);\r\n    } else {\r\n      setNumber(value);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleChange}\r\n          value={name}\r\n        />\r\n      </Label>\r\n\r\n      <Label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleChange}\r\n          value={number}\r\n        />\r\n      </Label>\r\n      <input type=\"submit\" value=\"Add contact\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(addContact(contact)),\r\n});\r\n// export default ContactForm;\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const changeFilter = createAction(\"contact/changeFilter\");\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Label } from \"./Filter.styled\";\r\nimport { changeFilter } from \"../../redux/contacts/filter/contacts-filter-actions\";\r\n\r\nfunction Filter() {\r\n  const filterStr = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Label>\r\n      Find contacts by name\r\n      <input\r\n        name=\"filter\"\r\n        value={filterStr}\r\n        onChange={(e) => dispatch(changeFilter(e.target.value.toLowerCase()))}\r\n      ></input>\r\n    </Label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onFilter: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const StyledContact = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  button {\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: tomato;\r\n    }\r\n  }\r\n`;\r\n","import PropTypes from \"prop-types\";\r\nimport { StyledContact } from \"./ContactItem.styled\";\r\n\r\nfunction ContactItem({ contact: { name, number }, onDelete }) {\r\n  return (\r\n    <StyledContact>\r\n      {name}: {number}\r\n      <button onClick={onDelete}>delete</button>\r\n    </StyledContact>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    id: PropTypes.string,\r\n  }),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { ContactItem } from \"../../Contact\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { delContact } from \"../../../redux/contacts/items/contacts-item-actions\";\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n\r\n  const filteredContacts = getFiltered(filter, contacts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {filteredContacts.map((contact) => {\r\n          return (\r\n            <ContactItem\r\n              key={contact.id}\r\n              contact={contact}\r\n              onDelete={() => dispatch(delContact(contact.id))}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getFiltered = (filter, items) => {\r\n  return filter\r\n    ? items.filter((contact) => contact.name.toLowerCase().includes(filter))\r\n    : items;\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\nexport default ContactList;\r\n","//import { useState, useEffect } from \"react\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport { ContactList } from \"./components/Contact\";\r\n//import { saveContacts, loadContacts } from \"./components/utils/storage\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addContact, delContact } from \"./contacts-item-actions\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [addContact]: (state, { payload }) => {\r\n    const { name, number } = payload;\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    };\r\n    return [...state, contact];\r\n  },\r\n  [delContact]: (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nexport default itemsReducer;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { changeFilter } from \"./contacts-filter-actions\";\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport itemsReducer from \"./items/contacts-item-reducer\";\r\nimport filterReducer from \"./filter/contacts-filter-reducer\";\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n","const STORAGE_NAME = \"contacts\";\r\n\r\nexport const loadContacts = () => {\r\n  const contacts = localStorage.getItem(STORAGE_NAME);\r\n  return contacts ? JSON.parse(contacts) : [];\r\n};\r\n\r\nexport const saveContacts = (contacts) => {\r\n  localStorage.setItem(STORAGE_NAME, JSON.stringify(contacts));\r\n};\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactReducer from \"./contacts\";\r\nimport { loadContacts, saveContacts } from \"../components/utils/storage\";\r\n\r\nconst persistedState = {\r\n  contacts: {\r\n    items: loadContacts(),\r\n  },\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  preloadedState: persistedState,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nstore.subscribe(() => {\r\n  saveContacts(store.getState().contacts.items);\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}